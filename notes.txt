
*** Everything in python is Object ***
*** Every object contains methods ****

number
--------
number can be integer or decimal or octal or hexa.

val = 10
aval = 34.3


string
--------
string is defined in single or double or triple quotes.

aname = 'python programming'
bname = "scala programming"
cname = """java programming"""


list ( kind of array in C)
----
list contains set of elements.
Elements can be set of numbers or strings or any combination.

alist =[10,20,30,40]
blist = ["java","oracle"]
clist = [45,34.32,"java"]



tuple  (  read only , immutable , unchangable )
-----
tuple contains set of elements.
Elements can be set of numbers or strings or any combination.

**** Elements inside the tuple cant be modified directly ****

atup = (10,34,"oracle",56.5)


dictionary
-------------
dictionary contains elements in key:value pairs
keys are string or number which are used to uniquely identify the value.
values can be either number or string or list or tuple or dictionary or set or list of lists of any complex structure.


syntax:    object = { key:value , key:value , key:value .... }
           book   = {"chap1":10 ,"chap2":20 ,"chap3":30}
           info   = {1:2,3:4,5:6}
           bookinfo   = {"chap1":[10,"Rita","US"] ,"chap2":[20,"Gita","UK"] }



set
----
set is UNORDERED collection of UNIQUE elements of SAME types.

aset = {10,20,30,30,30}



comments
--------
- single line comment
# this is single line comment

- multi line comment
all the lines defined in between ''' and ''' are ignored by interpreter.



mutable objects
----------------
list
dictionary
set


immutable objects
---------------------
tuple
number
string



function| definition| submodule | block
----------------------------------

- builtin functions
- user defined functions

builtin functions  ( already available in the python)
--------------------


How to display all the builtin functions ?
In the console(shell)

dir(__builtins__)


print()
len()
range()
help()
dir()
input() :  read input from the keyboard
max()
min()
sum()
type()
isinstance()
chr()
ord()



typecasting functions - converting from one object to another object
str()
int()
float()
oct()
hex()
list()
tuple()
dict()
set()





operators
---------


arithmetic operators :  + - * % /

assignment operators  ( ++ and -- are not allowed in python )
----------------------
val = 10

val = val + 1  or val+=1
val = val - 1 or val-=1

relational operators
-----------------
< <= > >= == !=

name = "python"
if len(name) >=6 :
    # your logic

logical operators
---------------------
and   or   not

name = "python"
if len(name) == 6  and name.isupper():
    # your logic

if len(name)  ==6 or  name.islower():  # If one of the condition is True
    # your logic


special operators
----------------
+
---
3 + 3
"hello" + "python"
[10,20] + [30,40]
(4,43) + (43,4,6)
[10,20] + (4,43)   # invalid


*
---
"python" * 3
[10,20] * 4
output = [10,20] * 4



in
---
name = "python"
if "p" in name:
   # your logic

alist = [10,20,30]
if 40 in alist:
   print("exists")
else:
   print("doesn't exist")


file handling
-------------

- working with flat files  ( csv txt conf log rtf prop  )

- working with third party files ( pdf  xlsx   xls  docx   pptx ... )


working with flat files
---------------------------



opening the file
-------------------
read mode
write mode
append mode


syntax:     object = open(filename, mode)
example:     fobj  = open("customers.txt","r")
             fobj  = open("customers.txt","w")
             case 1 :if the file is not existing ... file will be created first
             case 2 : if the file is already existing .. it overwrites the existing content first.

             fobj  = open("customers.txt","a")
             case 1 :if the file is not existing ... file will be created first
             case 2 : if the file is already existing .. it appends the data to the existing content first.


closing the file
----------------
fobj.close()



file read operation
------------------

- using file object
- using fobj.readlines()
- using fobj.read()
- using csv library
- using pandas library


exception handling
---------------------

There are 2 types of errors.

- syntax error
- semantic eror or runtime error or logical error

handling the errors in runtime is known as exception handling.



try
except
else
finally





function | definition | submodule | block
-------------------------------------------

- reusability purpose
- define your block once ... and call it for multiple times


ways of passing arguments
---------------------------
fixed arguments
default arguments
keyword arguments
variable length arguments
















































































